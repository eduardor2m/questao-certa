// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package bridge

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const signIn = `-- name: SignIn :one

SELECT id, name, email, password, admin, created_at, updated_at FROM "user" WHERE "email" = $1 LIMIT 1
`

func (q *Queries) SignIn(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, signIn, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Admin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const signUp = `-- name: SignUp :exec

INSERT INTO "user" ("id", "name", "email", "password", "admin", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type SignUpParams struct {
	ID        uuid.UUID
	Name      string
	Email     string
	Password  string
	Admin     bool
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) SignUp(ctx context.Context, arg SignUpParams) error {
	_, err := q.db.ExecContext(ctx, signUp,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Admin,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const verifyUserIsLoggedOrAdmin = `-- name: VerifyUserIsLoggedOrAdmin :one

SELECT id, name, email, password, admin, created_at, updated_at FROM "user" WHERE "id" = $1 LIMIT 1
`

func (q *Queries) VerifyUserIsLoggedOrAdmin(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, verifyUserIsLoggedOrAdmin, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Admin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
