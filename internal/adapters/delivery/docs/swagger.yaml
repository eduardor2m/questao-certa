basePath: /api
definitions:
  request.FilterDTO:
    properties:
      discipline:
        example: Engenharia de Produção
        type: string
      organization:
        example: CESGRANRIO
        type: string
      quantity:
        example: 10
        type: integer
      topic:
        example: Administração da Produção
        type: string
      year:
        example: "2023"
        type: string
    type: object
  request.QuestionDTO:
    properties:
      answer:
        example: Aumentar a qualidade
        type: string
      discipline:
        example: Engehnaria de Produção
        type: string
      model:
        example: multiple_choice
        type: string
      options:
        example:
        - '["Aumentar a produtividade"'
        - ' "Diminuir a produtividade"'
        - ' "Aumentar a qualidade"'
        - ' "Diminuir a qualidade"]'
        items:
          type: string
        type: array
      organization:
        example: CESGRANRIO
        type: string
      question:
        example: Qual o objetivo da administração da produção?
        type: string
      topic:
        example: Administração da Produção
        type: string
      year:
        example: "2023"
        type: string
    type: object
  request.UserDTO:
    properties:
      email:
        example: dudu@gmail.com
        type: string
      name:
        example: Eduardo Melo
        type: string
      password:
        example: "123456"
        type: string
    type: object
  request.UserDeleteDTO:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  request.UserLoginDTO:
    properties:
      email:
        example: dudu@gmail.com
        type: string
      password:
        example: "123456"
        type: string
    type: object
  response.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  response.InfoResponse:
    properties:
      message:
        type: string
    type: object
  response.Question:
    properties:
      answer:
        type: string
      created_at:
        type: string
      discipline:
        type: string
      id:
        type: string
      model:
        type: string
      options:
        items:
          type: string
        type: array
      organization:
        type: string
      question:
        type: string
      topic:
        type: string
      updated_at:
        type: string
      year:
        type: string
    type: object
  response.UserDTO:
    properties:
      admin:
        example: false
        type: boolean
      created_at:
        example: "2021-08-01T00:00:00Z"
        type: string
      email:
        example: dudu@gmail.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Eduardo Melo
        type: string
      password:
        example: "123456"
        type: string
      updated_at:
        example: "2021-08-01T00:00:00Z"
        type: string
    type: object
info:
  contact:
    email: deveduardomelo@gmail.com
    name: Eduardo Melo
  description: API para gerenciamento de questões e respostas
  title: Questão Certa API
  version: "1.0"
paths:
  /question:
    delete:
      consumes:
      - application/json
      description: Deleta todas as questões
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.InfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Deleta todas as questões
      tags:
      - Question
    post:
      consumes:
      - application/json
      description: Cria uma questão de múltipla escolha, onde só é possível uma resposta
        correta
      parameters:
      - description: Dados da questão de múltipla escolha
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/request.QuestionDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Questão criada com sucesso
          schema:
            $ref: '#/definitions/response.InfoResponse'
        "400":
          description: Erro ao criar questão
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Cria uma questão de múltipla escolha
      tags:
      - Question
  /question/{id}:
    delete:
      consumes:
      - application/json
      description: Deleta uma questão
      parameters:
      - description: ID da questão
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.InfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Deleta uma questão
      tags:
      - Question
  /question/{page}:
    get:
      consumes:
      - application/json
      description: Lista todas as questões
      parameters:
      - description: Número da página
        in: path
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.Question'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Lista todas as questões
      tags:
      - Question
  /question/filter:
    post:
      consumes:
      - application/json
      description: Lista questões por filtro
      parameters:
      - description: Filtro para busca de questões
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/request.FilterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.Question'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Lista questões por filtro
      tags:
      - Question
  /question/import:
    post:
      consumes:
      - application/json
      description: Importa questões de múltipla escolha a partir de um arquivo CSV
      parameters:
      - description: Arquivo CSV com as questões de múltipla escolha
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.InfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Importa questões de múltipla escolha
      tags:
      - Question
  /user:
    delete:
      consumes:
      - application/json
      description: Deleta um usuário
      parameters:
      - description: Dados do usuário
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.UserDeleteDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.InfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Deleta um usuário
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Lista os usuários
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.UserDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Lista os usuários
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Cria um usuário
      parameters:
      - description: Dados do usuário
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.UserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Usuário criado com sucesso
          schema:
            $ref: '#/definitions/response.InfoResponse'
        "400":
          description: Erro ao criar usuário
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Cria um usuário
      tags:
      - User
  /user/{email}:
    get:
      consumes:
      - application/json
      description: Busca um usuário pelo email
      parameters:
      - description: Email do usuário
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Busca um usuário pelo email
      tags:
      - User
  /user/signin:
    post:
      consumes:
      - application/json
      description: Autentica um usuário
      parameters:
      - description: Dados do usuário
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.UserLoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.InfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Autentica um usuário
      tags:
      - User
  /user/verify:
    get:
      consumes:
      - application/json
      description: Verifica o tipo do usuário
      parameters:
      - description: Token de autenticação
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.InfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Verifica o tipo do usuário
      tags:
      - User
securityDefinitions:
  bearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
