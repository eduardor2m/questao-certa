// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/interfaces/repository/questionLoader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	filter "github.com/eduardor2m/questao-certa/internal/app/entity/filter"
	question "github.com/eduardor2m/questao-certa/internal/app/entity/question"
	gomock "go.uber.org/mock/gomock"
)

// MockQuestionLoader is a mock of QuestionLoader interface.
type MockQuestionLoader struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionLoaderMockRecorder
}

// MockQuestionLoaderMockRecorder is the mock recorder for MockQuestionLoader.
type MockQuestionLoaderMockRecorder struct {
	mock *MockQuestionLoader
}

// NewMockQuestionLoader creates a new mock instance.
func NewMockQuestionLoader(ctrl *gomock.Controller) *MockQuestionLoader {
	mock := &MockQuestionLoader{ctrl: ctrl}
	mock.recorder = &MockQuestionLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionLoader) EXPECT() *MockQuestionLoaderMockRecorder {
	return m.recorder
}

// CreateQuestion mocks base method.
func (m *MockQuestionLoader) CreateQuestion(Question question.Question) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuestion", Question)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQuestion indicates an expected call of CreateQuestion.
func (mr *MockQuestionLoaderMockRecorder) CreateQuestion(Question interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuestion", reflect.TypeOf((*MockQuestionLoader)(nil).CreateQuestion), Question)
}

// DeleteAllQuestions mocks base method.
func (m *MockQuestionLoader) DeleteAllQuestions() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllQuestions")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllQuestions indicates an expected call of DeleteAllQuestions.
func (mr *MockQuestionLoaderMockRecorder) DeleteAllQuestions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllQuestions", reflect.TypeOf((*MockQuestionLoader)(nil).DeleteAllQuestions))
}

// DeleteQuestion mocks base method.
func (m *MockQuestionLoader) DeleteQuestion(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuestion", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuestion indicates an expected call of DeleteQuestion.
func (mr *MockQuestionLoaderMockRecorder) DeleteQuestion(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestion", reflect.TypeOf((*MockQuestionLoader)(nil).DeleteQuestion), id)
}

// ImportQuestionsByCSV mocks base method.
func (m *MockQuestionLoader) ImportQuestionsByCSV(questions []question.Question) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportQuestionsByCSV", questions)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportQuestionsByCSV indicates an expected call of ImportQuestionsByCSV.
func (mr *MockQuestionLoaderMockRecorder) ImportQuestionsByCSV(questions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportQuestionsByCSV", reflect.TypeOf((*MockQuestionLoader)(nil).ImportQuestionsByCSV), questions)
}

// ListQuestions mocks base method.
func (m *MockQuestionLoader) ListQuestions(page int) ([]question.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuestions", page)
	ret0, _ := ret[0].([]question.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuestions indicates an expected call of ListQuestions.
func (mr *MockQuestionLoaderMockRecorder) ListQuestions(page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuestions", reflect.TypeOf((*MockQuestionLoader)(nil).ListQuestions), page)
}

// ListQuestionsByFilter mocks base method.
func (m *MockQuestionLoader) ListQuestionsByFilter(filter filter.Filter) ([]question.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuestionsByFilter", filter)
	ret0, _ := ret[0].([]question.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuestionsByFilter indicates an expected call of ListQuestionsByFilter.
func (mr *MockQuestionLoaderMockRecorder) ListQuestionsByFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuestionsByFilter", reflect.TypeOf((*MockQuestionLoader)(nil).ListQuestionsByFilter), filter)
}
